<%- include("../../views/partials/admin/header") %>
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .form-label {
      margin-bottom: 8px;
    }
    
    .form-control:hover, 
    .form-control:focus {
    background-color: white !important;
    border-color: #ccc !important;
    box-shadow: none !important;
}

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }
    
    .d-grid {
      margin-top: 20px;
    }
     
     /* tr:hover {
     background-color: #000000 !important;
     color: #FFFF00 !important;
     } */

     tr:hover td {
     color: inherit !important;
     }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }
  
    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .pagination-container {
      text-align: center;
    }

    .pagination {
      display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 5px 10px;
      margin: 0 2px;
      border: 1px solid #ddd;
      text-decoration: none;
      color: #333;
    }

    .pagination a:hover {
      background-color: #f5f5f5;
    }
    

    .btn-primary {
  background-color: yellow; /* Change button background to yellow */
  color: rgb(0, 0, 0); /* Change text color to black */
  border: 1px solid yellow;
  border-radius: 5px;
  padding: 10px 20px;
  cursor: pointer;
}

.btn-primary:hover {
  background-color: rgb(255, 255, 255); /* Slightly darker yellow on hover */
  border-color: gold;
}
    .error-message {
      color: red;
      display:none;
      font-size: 14px;
    }
  </style>
</head>
       <body>
         <section class="content-main">
           <div class="content-header">
             <div>
               <h2 class="content-title card-title">Category</h2>
             </div>
           </div>
           <header class="card-header text-center mb-4">
         <form action="/admin/category/" method="get" class="d-inline-block w-100" style="max-width: 500px; margin: auto;" novalidate>
           <div class="input-group input-group-sm shadow-sm rounded">
       
             <input 
               type="text" 
               class="form-control border-0" 
               placeholder="Search categories..."
               name="search"
               value="<%= typeof search !== 'undefined' ? search : '' %>"
               style="padding-left: 15px;"
             >
             <button class="btn btn-primary px-3" type="submit">Search</button>
             <a href="/admin/category" class="btn btn-outline-secondary clear-btn px-3 d-flex align-items-center justify-content-center">
               Clear
             </a>
           </div>
         </form>
       </header>
       
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)" novalidate>
              <div class="mb-4">
                <label for="product_name" class="form-label" style="color: white;">Name</label>
                <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" required/>
                <div id="name-error" class="error-message"></div>
              </div>
              <div class="mb-4">
                <label class="form-label" style="color: white;">Description</label>
                <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" required></textarea>
                <div id="description-error" class="error-message"></div>
              </div>
              <div class="d-grid">
                <button class="btn-primary" type="submit">
                  Create category
                </button>
              </div>
            </form>
          </div>
          <div class="col-md-8 ml-10">
            <div class="table-responsive">
              <style>
                body {
                  background-color: #f8f9fa;
                  font-family: 'Poppins', sans-serif;
                  color: #333;
                }
              
                .card {
                  border-radius: 15px;
                  
                  
                  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }
              
                .col-md-3 {
                  background: linear-gradient(135deg, rgb(255, 255, 255), rgb(255, 255, 255));
                  color: white;
                  border-radius: 10px;
                  padding: 20px;
                }
              
                .form-label {
                  font-weight: 600;
                }
              
                .form-control {
                  border-radius: 8px;
                  border: 1px solid #ced4da;
                }
              
                .btn-primary {
                  background: linear-gradient(135deg, #383737, #000000);
                  color: rgb(255, 255, 255);
                  border: none;
                  font-weight: bold;
                }
              
                .btn-primary:hover {
                  background: linear-gradient(135deg, #000000, #000000);
                }
              
                .table thead {
                  background-color: #000000 !important;
                  color: white !important;
                  text-align: center;
                }
              
                .table tbody tr {
                  transition: all 0.3s ease-in-out;
                }
              
                .table tbody tr:hover {
                  background-color: #ffffff !important;
                  color: rgb(0, 0, 0) !important;
                }
              
                .pagination a,
                .pagination .current-page {
                  background: #1c1c1c;
                  color: white;
                  padding: 8px 12px;
                  border-radius: 5px;
                }
              
                .pagination a:hover {
                  background: #f1c40f;
                  color: black;
                }
              </style>
              
              
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th class="text-center">#</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer Price</th>
                    <th>Offer</th>
                    <th>Status</th>
                    <th>List/Unlist</th>
                    <th class="text-start">Edit</th>
                  </tr>
                </thead>
                <tbody>
                  <%[...cat].reverse().forEach((category, index) => { %>
                  <tr>
                    <td><%= index + 1 %></td>
                    <td class="text-start"><%= category.name %></td>
                    <td class="text-start"><%= category.description %></td>
                    <td>
                      <% if (category.categoryOffer) { %>
                        <%= category.categoryOffer %>%
                      <% } else { %>
                        0%
                      <% } %>
                    </td>
                    <td>
                      <% if (category.categoryOffer === 0) { %>
                        <button class="btn btn-info" onclick="addOffer('<%= category._id %>')">AddOffer</button>
                      <% } else { %>
                        <button class="btn btn-info" onclick="removeOffer('<%= category._id %>')">Remove</button>
                      <% } %>
                    </td>
                    <td>
                      <% if (category.isListed) { %>
                        <span class="badge bg-success">Listed</span>
                      <% } else { %>
                        <span class="badge bg-danger">Unlisted</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (category.isListed) { %>
                        <button class="btn btn-danger"><a href="/admin/listCategory?id=<%= category._id %>" class="text-white">Unlist</a></button>
                      <% } else { %>
                        <button class="btn btn-success"><a href="/admin/unlistCategory?id=<%= category._id %>" class="text-white">List</a></button>
                      <% } %>
                    </td>
                    <td class="text-start">
                      <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info text-white">Edit</a>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
              
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="pagination-container">
        <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %> <% for (let i = 1; i <= totalPages; i++) { %> 
          <% if (i === currentPage) { %>
        <span class="current-page"><%= i %></span>
        <% } else { %>
        <a href="?page=<%= i %>"><%= i %></a>
        <% } %> <% } %> <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
      </div>
  
  </section>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>

function handleFormSubmit(event){
    event.preventDefault();
    if(!validateForm()){
        return false;
    }
    const name=document.getElementsByName("name")[0].value;
    const description=document.getElementById("descriptionId").value;

    fetch("/admin/addCategory",{
        method:"POST",
        headers:{
            "content-type":"application/json"
        },
        body:JSON.stringify({name,description})
    })
    .then(response=>{
        if(!response.ok){
            return response.json().then(err=>{
                throw new Error(err.error);
            })
        }
        return response.json();
    })
    .then(data=>{
        location.reload();
    })
    .catch(error=>{
        if(error.message === "Category already exists"){
           Swal.fire({
            icon:"error",
            title:"Oops",
            text:"Category already exists"
           }) 
        }else{
            Swal.fire({
                icon:"error",
                title:"Oops",
                text:error.message ||"An error occured while adding the category"
            })
        }
    })
}


function validateForm(){
    clearErrorMessages();
    const name=document.getElementsByName("name")[0].value.trim();
    const description=document.getElementById("descriptionId").value.trim();
    let isValid=true;

    if(name === ""){
        displayErrorMessage("name-error","Please enter a name");
        isValid=false;
    }else if(!/^[a-zA-Z\s]+$/.test(name)){
        displayErrorMessage( "name-error","Category name should contain only alphabetic characters");
        isValid=false;
    }
    if(description === ""){
        displayErrorMessage("description-error","Please enter a description");
        isValid=false;
    }
    return isValid;
}


function displayErrorMessage(elementId,message){
    const  errorElement=document.getElementById(elementId);
    errorElement.innerText=message;
    errorElement.style.display="block";
}


function clearErrorMessages(){
    const errorElements=document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element)=>{
        element.innerText= "";
        element.style.display="none";
    })
}


async function addOffer(categoryId){
    const {value:amount}=await Swal.fire({
        title:"Offer in percentage",
        input:"number",
        inputLabel:"Percentage",
        inputPlaceholder:"%",
        inputAttributes:{
          min:1,
          max:99
        },
        inputValidator:(value)=>{
        if(!value){
          return "Please eneter a percentage";
        }if(isNaN(value)){
          return "Percentage must be a number";
        }
        const num=parseInt(value);
        if(num<=0 || num>=100){
          return "Percentage must be between 1 and 99";
        }
        return null;
       }
    });
       
    if(amount){
        try{
            const response=await fetch("/admin/addCategoryOffer",{
                method:"POST",
                headers:{
                    "content-type":"application/json",
                },
                body:JSON.stringify({
                    percentage:amount,
                    categoryId:categoryId,
                }),
            })
            const data=await response.json();

            if(response.ok && data.status === true){
                Swal.fire(
                    "Offer added",
                    "The Offer has been added",
                    "success"
                ).then(()=>{
                    location.reload();
                })
            }else{
                Swal.fire("Failed", data.message || "Adding offer failed", "error")
            }
        }catch(error){
            Swal.fire(
                "Error",
                "An error occured while adding the offer",
                "error"
            );
            console.log("Error adding offer",error)
        }
    }
}


async function removeOffer(categoryId){
    try {
        const response =await fetch("/admin/removeCategoryOffer",{
            method:"POST",
            headers:{
                "content-type":"application/json",
            },
            body:JSON.stringify({
                categoryId:categoryId,
            })
        })
        const data=await response.json();
        if(response.ok && data.status === true){
            Swal.fire(
                "Offer removed",
                "The offer has been removed",
                "Success"
            )
            .then(()=>{
                location.reload();
            });
        }else{
            Swal.fire(
                "Failed",data.message || "Removing Offer failed" , "error"
            )
        }        
    } catch (error) {
        Swal.fire(
            "Error",
            "An error occured while removing the offer",
            "error"
        );
        console.log("Error removing Offer",error)
    }
}
document.addEventListener("DOMContentLoaded", () => {
    const categoryTextElements = document.querySelectorAll("td.text-start");

    categoryTextElements.forEach(el => {
        const text = el.textContent.trim();
        if (text.length > 14) {
            el.textContent = text.substring(0, 14) + "...";
        }
    });
});


</script>
<%- include("../../views/partials/admin/footer") %>
</body>



