<%- include("../../views/partials/user/header") %>
<head><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
    <style>
        :root {
            --primary: #2A2F4F;
            --secondary: #917FB3;
            --accent: #E5BEEC;
            --light: #FDE2F3;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f5f5f5;
        }

        .checkout-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 15px;
        }

        .checkout-section {
            background: white;
            border-radius: 20px;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .address-card {
            border: 2px solid var(--light);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            background: #fff;
        }

        .address-card.selected {
            border-color: var(--primary);
            background: #f8f5ff;
        }

        .payment-method {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1.5rem;
            border: 2px solid var(--light);
            border-radius: 12px;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .product-thumbnail {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 12px;
        }

        .btn {
            width: 100%;
            padding: 0.85rem;
            background-color: black;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-weight: bold;
            margin-top: 1rem;
        }

        .btn:hover {
            background-color: #dc3545;
            color: white;
        }

        .edit-btn {
            background: black;
            border: none;
            border-radius: 8px;
            color: white;
            /* Use your theme color */
            padding: 4px 8px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }

        .edit-btn:hover {
            color: white;
            /* Darker version of primary color */
            background: #dc3545;
            border-radius: 4px;
        }

        .edit-btn:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
        }

        .edit-btn i {
            font-size: 0.8em;
        }
    </style>

    <div class="checkout-container">
        <div class="row">
            <div class="col-lg-8">
                <div class="checkout-section">
                    <h3 class="mb-4">Delivery Address</h3>
                    <div class="address-list">
                        <%if(addresses.length> 0 ) {%>
                            <%addresses.forEach((address,index)=>{ %>

                                <!-- add -->

                                <div class="address-card selected <%= index === 0 ? 'selected' : '' %> ">
                                    <div class="address-actions">
                                        <button class="edit-btn"
                                            onclick="editAddress('<%= index %>', '<%= address._id%>', '<%= address.name %>', '<%= address.addressType %>', '<%= address.city %>', '<%= address.landMark %>', '<%= address.state %>', '<%= address.pincode %>', '<%= address.phone %>')">
                                            Edit
                                        </button>

                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="selectedAddress"
                                            data-address-id="<%= address._id %>" value="<%=index%>" <%=index===0
                                            ? 'checked' : '' %>>
                                        <label class="form-check-label">
                                            <strong>
                                                <%=address.name%>
                                            </strong><br>
                                            <%=address.addressType %>,<%=address.city%><br>
                                                    <%=address.state%> - <%=address.pincode%> <br>
                                                            <%=address.phone%>
                                        </label>
                                    </div>
                                </div>
                                <%})%>
                                    <%}else{%>
                                        <p>No addresses found. Please add one.</p>
                                        <%}%>


                                            <button class="btn" data-bs-toggle="modal"
                                                data-bs-target="#addAddressModal">Add New Address</button>

                    </div>
                </div>

                <!-- Add Address Modal -->
                <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addAddressForm">
                                    <input type="hidden" id="addressIndex" name="addressIndex">
                                    <input type="hidden" id="addressId" name="addressId">

                                    <div class="mb-3">
                                        <label for="name" class="form-label">Full Name</label>
                                        <input type="text" class="form-control" id="name" name="name" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="addressType" class="form-label">Address Type (Home/Work)</label>
                                        <input type="text" class="form-control" id="addressType" name="addressType"
                                            required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="city" class="form-label">City</label>
                                        <input type="text" class="form-control" id="city" name="city" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="landMark" class="form-label">landMark</label>
                                        <input type="text" class="form-control" id="landMark" name="landMark" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="state" class="form-label">State</label>
                                        <input type="text" class="form-control" id="state" name="state" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="pincode" class="form-label">Pincode</label>
                                        <input type="text" class="form-control" id="pincode" name="pincode" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="phone" class="form-label">Phone Number</label>
                                        <input type="text" class="form-control" id="phone" name="phone" required>
                                    </div>

                                    <button type="submit" class="btn btn-primary w-100">Save Address</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="checkout-section mt-4">
                    <h3 class="mb-4">Order Items</h3>
                    <%if(cart && cart.length> 0) {%>
                        <% cart.forEach(item=> {%>
                            <div class="cart-item">
                                <img src="/uploads/re-image/<%= item.productId.productImage[0]%>" alt="Product"
                                    class="product-thumbnail">
                                <div class="flex-grow-1">
                                    <h5>
                                        <%=item.productId.productName%>
                                    </h5>
                                    <div class="d-flex justify-content-between">
                                        <div>Quantity: <%=item.quantity%>
                                        </div>
                                        <div class="text-primary">â‚¹<%=item.productId.salesPrice * item.quantity%>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <%})%>
                                <%}else{%>
                                    <p>Your cart is empty.</p>
                                    <%}%>
                </div>
                <div class="checkout-section mt-4">
                    <h3 class="mb-4">Payment Method</h3>
                    <div class="payment-method"  >
                        <input class="form-check-input" type="radio" name="paymentMethod" value="COD" >
                        <i class="fas fa-hand-holding-usd fa-2x"></i>
                        <div>
                            <h5>Cash on Delivery</h5>
                            <p class="text-muted">Pay when you receive your order</p>
                        </div>
                    </div>
                    
                    <div class="payment-method"  >
                        <input class="form-check-input" type="radio" name="paymentMethod" value="razorpay" >
                        <i class="fas fa-credit-card fa-2x"></i>
                        <div>
                            <h5>Online Payment (Razorpay)</h5>
                            <p class="text-muted">Secure online payment</p>
                        </div>
                    </div>
                    
                    <div class="payment-method"  >
                        <input class="form-check-input" type="radio" name="paymentMethod" value="wallet">
                        <i class="fas fa-wallet fa-2x"></i>
                        <div>
                            <h5>Wallet Payment</h5>
                            <p class="text-muted">Use available balance</p>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-4">
                <div class="checkout-section">
                    <h3 class="mb-4">Price Details</h3>
                    <div class="available-coupons mb-3">
                        <!-- Available coupons section -->
                        <h5>Available Coupons</h5>
                         <ul id="couponList" class="list-group">
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach(coupon => { %>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>
                                        <strong><%= coupon.name %></strong> - â‚¹<%= coupon.offerPrice %> OFF
                                    </span>
                                    <button class="btn btn-sm btn-outline-primary" onclick="applyCoupon('<%= coupon.name %>','<%= coupon.offerPrice %>','<%= coupon.minimumPrice %>','<%= totalPrice %>' )">Apply</button>
                                </li>
                            <% }); %>
                        <% } else { %>
                            <li class="list-group-item text-muted">No available coupons</li>
                        <% } %>
                    </ul>
                    </div>

                    <div class="coupon-section mb-3">
                        <div id="couponInputGroup" class="d-flex gap-2">
                            <input type="text" id="couponCode" class="form-control" placeholder="Enter coupon code">
                            <button onclick="applyCoupon()" class="btn btn-sm mt-2">Apply</button>
                        </div>
                        <div id="appliedCoupon" style="display: none;" class="mt-2">
                            <span>Applied Coupon: <strong id="appliedCouponCode"></strong></span>
                            <button onclick="removeCoupon()" class="btn btn-link btn-sm text-danger">Remove</button>
                        </div>
                        <p id="couponMessage" class="mt-2 text-danger" style="display: none;"></p>
                    </div>
                    <div class="summary-item">
                        <span>Price (<%= cart ? cart.items : 0 %> items)</span>
                        <span>â‚¹<%=totalPrice%></span>
                    </div>
                    <div class="summary-item">
                        <span>Discount</span>
                        <span id="discountAmount" class="text-success">
                            -â‚¹
                        </span>
                    </div>
                    <div class="summary-item">
                        <span>Tax (10%)</span>
                        <span id="taxAmount">â‚¹<%= taxAmount.toFixed(2) %></span>
                    </div>
                    <div class="summary-total">
                        <span>Total Amount</span>
                        <span id="finalPrice">â‚¹<%= totalPrice + taxAmount%></span>
                        <input type="hidden" id="totalPriceValue" value="<%= totalPrice ? totalPrice : 0 %>">
                        <input type="hidden" id="taxAmountValue" value="<%= taxAmount ? taxAmount : 0 %>">
                    </div>
        
               
                    <button class="btn" onclick="placeOrder('<%= user._id %>', '<%= totalPrice %>', '<%= coupons.length ? coupons[0].offerPrice : 0 %>', '<%= taxAmount %>')">

                                Place Order
                            </button>
                </div>
            </div>
        </div>
    </div>



    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
async function initiateRazorpayPayment(userId) {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
        alert("Please select a delivery address.");
        return;
    }

    if (!paymentMethod || paymentMethod.value !== 'razorpay') {
        alert("Please select Razorpay as the payment method.");
        return;
    }

    const addressId = selectedAddress.dataset.addressId;
    const totalPrice = parseFloat(document.getElementById('totalPriceValue').value);
    const discount = parseFloat(document.getElementById('discountValue')?.value || 0);

    console.log("Selected Address ID:", addressId);

    try {
        const orderResponse = await fetch("/create-razorpay-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                userId: userId,
                totalPrice: totalPrice
            })
        });

        const orderResult = await orderResponse.json();
        console.log(orderResult)
        if (!orderResult.success) {
            throw new Error(orderResult.error || "Failed to create order");
        }
        const razorpayOptions = {
            key: "<%= process.env.RAZORPAY_KEY_ID %>",  
            amount: totalPrice * 100,
            currency: "INR",
            name: "Your Store Name",
            description: "Order Payment",
            order_id: orderResult.orderId,
            retry: false ,
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch("/verify-razorpay-payment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            addressId: addressId,
                            totalPrice: totalPrice,
                            userId: userId,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            orderId: orderResult.orderId
                        })
                    });

                    const verifyResult = await verifyResponse.json();

                    if (verifyResult.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Order Placed!",
                            text: "Your order has been placed successfully.",
                        }).then(() => {
                            window.location.href = "/order-success";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: verifyResult.error || "There was an issue with the payment.",
                        }).then(() => {
                            window.location.href = "/order-failed";
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: "error",
                        title: "Order Error",
                        text: "Something went wrong while verifying the payment.",
                    }).then(() => {
                        window.location.href = "/order-failed";
                    });
                }
            }
        };

        const razorpayPayment = new Razorpay(razorpayOptions);

        razorpayPayment.on("payment.failed", async function (response) {
            console.error("Payment Failed:", response);

            try {
                const failedOrderResponse = await fetch("/create-failed-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        userId: userId,
                        addressId: addressId,
                        totalPrice: totalPrice,
                        discount: discount,
                        paymentMethod: "Razorpay",
                        razorpayPaymentId: response.error.metadata.payment_id,
                        razorpayOrderId: response.error.metadata.order_id
                    })
                });

                const failedOrderResult = await failedOrderResponse.json();

                if (failedOrderResult.success) {
                    console.log("Failed Order Created Successfully:", failedOrderResult);

                    Swal.fire({
                        icon: "error",
                        title: "Payment Failed",
                        text: "Your payment has failed. You can retry from the Orders page.",
                    }).then(() => {
                        window.location.href = "/order-failed";
                    });

                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Failed to save order. Please contact support.",
                    }).then(() => {
                        window.location.href = "/order-failed";
                    });
                }
            } catch (err) {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Something went wrong. Please try again.",
                }).then(() => {
                    window.location.href = "/order-failed";
                });
            }
        });

        razorpayPayment.open();
    } catch (error) {  
        Swal.fire({
            icon: "error",
            title: "Payment Error",
            text: error.message,
        }).then(() => {
            window.location.href = "/order-failed";
        });
    }
}







    async function placeOrder(userId) {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
        const totalPrice = parseFloat(document.getElementById('totalPriceValue').value);
    
        if (!selectedAddress) {
            alert("Please select a delivery address.");
            return;
        }
    
        if (!paymentMethod) {
            alert("Please select a payment method.");
            return;
        }
    
        const addressId = selectedAddress.dataset.addressId;
    
        if (paymentMethod.value === 'razorpay') {
            initiateRazorpayPayment(userId);
        } else if (paymentMethod.value === 'COD') {
            try {
                const response = await fetch("/orderPlaced", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        userId: userId,
                        addressId: addressId,
                        totalPrice: totalPrice,
                        paymentMethod: "COD"
                    })
                });
    
                const result = await response.json();
                if (result.success) {
                    alert("Order placed successfully!");
                    window.location.href = "/order-success";
                } else {
                    alert(result.error || "Failed to place order.");
                }
            } catch (error) {
                console.error("Error placing order:", error);
                alert("An error occurred while placing the order.");
            }
        } else if (paymentMethod.value === 'wallet') {
             try{
             const response = await fetch("/walletPayment", {
                 method: "POST",
                 headers: { "Content-Type": "application/json" },
                 body: JSON.stringify({
                     userId: userId,
                     addressId: addressId,
                     totalPrice,
                     paymentMethod: paymentMethod.value, 
                 })
             });
 
             const result = await response.json();
             if (result.success) {
                 Swal.fire({
                     icon: "success",
                     title: "Order Placed!",
                     text: "Payment was successful using wallet.",
                 }).then(() => {
                     window.location.href = "/order-success";
                 });
             } else {
                 Swal.fire({
                     icon: "error",
                     title: "Payment Failed",
                     text: result.error || "Insufficient wallet balance.",
                 });
             }
            }
        
 
      catch (error) {
         Swal.fire({
             icon: "error",
             title: "An Error Occurred",
             text: "Something went wrong while placing the order.",
         });
     }
 }
}
    
    function editAddress(index, id, name, addressType, city, landMark, state, pincode, phone) {
        document.getElementById("addressIndex").value = index;
        document.getElementById("addressId").value = id;
        document.getElementById("name").value = name;
        document.getElementById("addressType").value = addressType;
        document.getElementById("city").value = city;
        document.getElementById("landMark").value = landMark;
        document.getElementById("state").value = state;
        document.getElementById("pincode").value = pincode;
        document.getElementById("phone").value = phone;
    
        document.getElementById("addAddressModalLabel").innerText = "Edit Address";
    
        var modal = new bootstrap.Modal(document.getElementById("addAddressModal"));
        modal.show();
    }
    
    document.getElementById("addAddressForm").addEventListener("submit", async function (e) {
        e.preventDefault();
    
        const formData = new FormData(this);
        const formObject = {};
        formData.forEach((value, key) => { formObject[key] = value; });
    
        const isEditing = document.getElementById("addressId").value !== "";
    
        try {
            const response = await fetch(isEditing ? "/edit-address" : "/add-address", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formObject),
            });
    
            const result = await response.json();
            if (result.success) {
                alert(result.message);
                location.reload();
            } else {
                alert(result.message);
            }
        } catch (error) {
            console.error("Error saving address:", error);
            alert("Failed to save address.");
        }
    });
    
    document.querySelectorAll('.address-card').forEach(card => {
        card.addEventListener('click', function (e) {
            if (!e.target.closest('.address-actions')) {
                document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                this.querySelector('input[type="radio"]').checked = true;
            }
        });
    });

    //coupon
    let appliedCouponCode=null;
    async function applyCoupon(couponName,offerPrice,minimumPrice,totalPrice){
        const couponCode=couponName
        if(totalPrice<minimumPrice){
            showCouponMessage("not valid coupon");
            return;
        }
        if(!couponCode){
            showCouponMessage("Please eneter a coupon code","red");
            return;
        }
        try{
            const response=await fetch("/apply-coupon",{
                method:"POST",
                headers:{"Content-Type":"application/json"},
                body:JSON.stringify({couponCode})
            });
            const result=await response.json();
            if(result.success){
                appliedCouponCode=couponCode;
                updatePriceDisplay(result.discount,result.finalPrice);
                showCouponUI(couponCode);
                showCouponMessage("Coupon applied successfully!","green");
            }else{
                showCouponMessage(result.message,"green");
            }
        }catch(error){
            showCouponMessage("Failed to apply coupon","red");
        }
    }

    async function removeCoupon(){
        if(!appliedCouponCode)return;
        try {
            const response=await fetch("/remove-coupon",{
                method:"POST",
                headers:{"Content-Type":"application/json"},
                body:JSON.stringify({couponCode:appliedCouponCode})
            });
            const result=await response.json();
            if(result.success){
                appliedCouponCode=null;
                resetCouponUI();
                showCouponMessage("Coupon removed successfully!","green");
            }
        } catch (error) {
            showCouponMessage("Failed to remove Coupon","red");
        }
    }
    function applySelectedCoupon(couponCode){
        document.getElementById("couponCode").value=couponCode;
    }
    function updatePriceDisplay(discount,finalPrice){
        const taxAmount=parseFloat(document.getElementById("taxAmountValue").value);
        document.getElementById("discountAmount").textContent=`â‚¹${discount}`;
        document.getElementById("finalPrice").textContent=`â‚¹${finalPrice + taxAmount}`;
    }
    function showCouponUI(couponCode){
        document.getElementById("couponInputGroup").style.display="none";
        document.getElementById("appliedCoupon").style.display="block";
        document.getElementById("appliedCouponCode").textContent=couponCode;
    }
    function resetCouponUI(){
        const totalPrice=parseFloat(document.getElementById("totalPriceValue").value);
        const taxAmount=parseFloat(document.getElementById("taxAmountValue").value);

        document.getElementById("couponInputGroup").style.display = "flex";
        document.getElementById("appliedCoupon").style.display = "none";
        document.getElementById("couponCode").value = "";
        document.getElementById("discountAmount").textContent = "â‚¹0";
        document.getElementById("finalPrice").textContent = `â‚¹${(totalPrice + taxAmount).toFixed(2)}`;
    }
    function showCouponMessage(message,color){
        const messageElement=document.getElementById("couponMessage");
        messageElement.textContent=message;
        messageElement.style.color=color;
        messageElement.style.display="block";
        setTimeout(()=>messageElement.style.display="none",3000);
    }
    </script>



    <%- include("../../views/partials/user/footer")Â %>